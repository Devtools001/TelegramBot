import bs4
import html
import jikanpy
import datetime
import textwrap
import requests
import json
from pyrogram import filters 
from TeleBot import pgram 
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery 
from pyrogram.enums import ParseMode 



url = 'https://graphql.anilist.co'

async def shorten(description, info='anilist.co'):
    msg = ""
    if len(description) > 700:
        description = description[0:500] + '....'
        msg += f"\n**üóí ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ¬ª** `_{description}_`[ Ä·¥á·¥Ä·¥Ö ·¥ç·¥è Ä·¥á]({info})"
    else:
        msg += f"\n**üóí ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ¬ª**`_{description}_`"
    return msg

async def t(milliseconds: int) -> str:
    """Inputs time in milliseconds, to get beautified time,
    as string"""
    seconds, milliseconds = divmod(int(milliseconds), 1000)
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    days, hours = divmod(hours, 24)
    tmp = ((str(days) + " Days, ") if days else "") + \
        ((str(hours) + " Hours, ") if hours else "") + \
        ((str(minutes) + " Minutes, ") if minutes else "") + \
        ((str(seconds) + " Seconds, ") if seconds else "") + \
        ((str(milliseconds) + " ms, ") if milliseconds else "")
    return tmp[:-2]


airing_query = '''
    query ($id: Int,$search: String) {
      Media (id: $id, type: ANIME,search: $search) {
        id
        siteUrl
        episodes
        title {
          romaji
          english
          native
        }
        nextAiringEpisode {
           airingAt
           timeUntilAiring
           episode
        }
      }
    }
    '''
manga_query = """
query ($id: Int,$search: String) {
      Media (id: $id, type: MANGA,search: $search) {
        id
        title {
          romaji
          english
          native
        }
        description (asHtml: false)
        startDate{
            year
          }
          type
          format
          status
          siteUrl
          averageScore
          genres
          bannerImage
      }
    }
"""

character_query = """
    query ($query: String) {
        Character (search: $query) {
               id
               name {
                     first
                     last
                     full
               }
               siteUrl
               image {
                        large
               }
               description
        }
    }
"""


anime_query = '''
   query ($id: Int,$search: String) {
      Media (id: $id, type: ANIME,search: $search) {
        id
        title {
          romaji
          english
          native
        }
        description (asHtml: false)
        startDate{
            year
          }
          episodes
          season
          type
          format
          status
          duration
          siteUrl
          studios{
              nodes{
                   name
              }
          }
          trailer{
               id
               site
               thumbnail
          }
          averageScore
          genres
          bannerImage
      }
    }
'''

@pgram.on_message(filters.command("anime"))
async def _anime(_, message):
    if len(message.command) < 2 :
        await message.reply_text('“ì·¥è Ä·¥ç·¥Ä·¥õ : /·¥Ä…¥…™·¥ç·¥á < ·¥Ä…¥…™·¥ç·¥á …¥·¥Ä·¥ç·¥á >')
        return     
    else:
        search = message.text.split(None,1)
        search = search[1]
    variables = {'search': search}
    json = requests.post(
        url, json={
            'query': anime_query,
            'variables': variables
        }).json()
    if 'errors' in json.keys():
        await message.reply_text('üôÑ ·¥Ä…¥…™·¥ç·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö')
        return
    
    if json:        
        json = json['data']['Media']
        print(json['startDate']['year'])
        msg = f"""
**üìÄ ·¥õ…™·¥õ ü·¥á ¬ª {json['title']['romaji']}** ‚îå‚Å†(‚Å†„Éª‚Å†„ÄÇ‚Å†„Éª‚Å†)‚Å†‚îò‚Å†‚ô™ **({json['title']['native']})**

**üé£ ·¥õ è·¥ò·¥á ¬ª** {json['format']}
**‚ö°s·¥õ·¥Ä·¥õ·¥ús ¬ª** {json['status']}
**‚ú® ·¥á·¥ò…™s·¥è·¥Ö·¥ás ¬ª** {json.get('episodes', 'N/A')}

**‚è≤Ô∏è ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ ¬ª** {json.get('duration', 'N/A')} ·¥ò·¥á Ä ·¥á·¥ò.
**üìÜ  Ä·¥á ü·¥á·¥Äs·¥á  è·¥á·¥Ä Ä ¬ª** {json['startDate']['year']}
**üåü s·¥Ñ·¥è Ä·¥á ¬ª**: {json['averageScore']}

**üé≠ …¢·¥á…¥ Ä·¥ás ¬ª**: `"""
        for x in json['genres']:
            msg += f"{x}, "
        msg = msg[:-2] + '`\n'
        msg += "**üíò s·¥õ·¥ú·¥Ö…™·¥ès ¬ª**: `"
        for x in json['studios']['nodes']:
            msg += f"{x['name']}, "
        msg = msg[:-2] + '`\n'
        anime_name_w = f"{json['title']['romaji']}"
        info = json.get('siteUrl')
        trailer = json.get('trailer', None)
        anime_id = json['id']
        if trailer:
            trailer_id = trailer.get('id', None)
            site = trailer.get('site', None)
            if site == "youtube":
                trailer = 'https://youtu.be/' + trailer_id
        description = json.get('description', 'N/A').replace('<b>', '').replace(
            '</b>', '').replace('<br>', '')
        msg += await shorten(description, info)
        image = info.replace('anilist.co/anime/', 'img.anili.st/media/')

    if trailer:
        buttons = [[
                InlineKeyboardButton("‚Ä¢ ·¥õ Ä·¥Ä…™ ü·¥á Ä ‚Ä¢", url=trailer),                
            ]]
        buttons += [[InlineKeyboardButton("‚Ä¢ ·¥ç·¥è Ä·¥á …™…¥“ì·¥è ‚Ä¢", url=info)]]
    else:
        buttons = [[InlineKeyboardButton("‚Ä¢ ·¥ç·¥è Ä·¥á …™…¥“ì·¥è ‚Ä¢", url=info)]]
        
         
    if image:
            try:
                await message.reply_photo(
                    photo=image,
                    caption=msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons))
            except:
                msg += f" [„ÄΩÔ∏è]({image})"
                await message.reply_text(
                    msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await message.reply_text(
           msg,
           parse_mode=ParseMode.MARKDOWN,
           reply_markup=InlineKeyboardMarkup(buttons))

@pgram.on_message(filters.command("manga"))
async def _manga(_, message):
    if len(message.command) < 2 :
        await message.reply_text('“ì·¥è Ä·¥ç·¥Ä·¥õ : /·¥ç·¥Ä…¥…¢·¥Ä < ·¥ç·¥Ä…¥…¢·¥Ä …¥·¥Ä·¥ç·¥á >')
        return  
    search = message.text.split(None,1)
    search = search[1]
    variables = {'search': search}
    json = requests.post(
        url, json={
            'query': manga_query,
            'variables': variables
        }).json()
    msg = ''      
    if 'errors' in json.keys():
        await message.reply_text('·¥ç·¥Ä…¥…¢·¥Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö')
        return
    if json:
        json = json['data']['Media']
        title, title_native = json['title'].get('romaji',
                                                False), json['title'].get(
                                                    'native', False)
        start_date, status, score = json['startDate'].get(
            'year', False), json.get('status',
                                     False), json.get('averageScore', False) 
        if title:
            msg += f"**‚¶æ ·¥õ…™·¥õ ü·¥á ¬ª** {title}"
            if title_native:
                msg += f"(`{title_native}`)"
        if start_date:
            msg += f"\n\n**‚¶æ s·¥õ·¥Ä Ä·¥õ  è·¥á·¥Ä Ä ¬ª** `{start_date}`"
        if status:
            msg += f"\n**‚¶æ s·¥õ·¥Ä·¥õ·¥ús ¬ª** `{status}`"
        if score:
            msg += f"\n**‚¶æ s·¥Ñ·¥è Ä·¥á ¬ª** `{score}`"
        msg += '\n**‚¶æ …¢·¥á…¥ Ä·¥ás ¬ª** '
        for x in json.get('genres', []):
            msg += f"{x}, "
        msg = msg[:-2]
        info = json['siteUrl']       
        buttons = [[InlineKeyboardButton("‚Ä¢ ·¥ç·¥è Ä·¥á …™…¥“ì·¥è ‚Ä¢", url=info)]]        
        image = json.get("bannerImage", False)
        msg += f"**\n\n‚¶æ ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ¬ª** _{json.get('description', None)}_"
        if image:
            try:
                await message.reply_photo(
                    photo=image,
                    caption=msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons))
            except:
                msg += f" [„ÄΩÔ∏è]({image})"
                await message.reply_text(
                    msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await message.reply_text(
                msg,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(buttons))

@pgram.on_message(filters.command("character"))
async def _character(_, message):
    if len(message.command) < 2 :
        await message.reply_text('“ì·¥è Ä·¥ç·¥Ä·¥õ : /·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä < ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä …¥·¥Ä·¥ç·¥á >')
        return   
    search = message.text.split(None,1)  
    search = search[1]
    variables = {'query': search}
    json = requests.post(
        url, json={
            'query': character_query,
            'variables': variables
        }).json()   
    if 'errors' in json.keys():
        await message.reply_text('Character not found')
        return
    if json:
        json = json['data']['Character']
        msg = f"**‚¶æ ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä :** {json.get('name').get('full')}**(`{json.get('name').get('native')}`)** \n"
        description = f"{json['description']}"
        site_url = json.get('siteUrl')
        char_name = f"{json.get('name').get('full')}"
        msg += await shorten(description, site_url)
        image = json.get('image', None)
        if image:
            image = image.get('large')
            await message.reply_photo(
                photo=image,
                caption=msg.replace('<b>', '</b>'),               
                parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply_text(
                msg.replace('<b>', '</b>'), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN) 

@pgram.on_message(filters.command("airing"))
async def _airing(_, message):
    if len(message.command) < 2 :
        await message.reply_text('·¥ús·¥Ä…¢·¥á: /·¥Ä…™ Ä…™…¥…¢ <·¥Ä…¥…™·¥ç·¥á …¥·¥Ä·¥ç·¥á>')
        return           
    search_str = message.text.split(None,1)
    variables = {'search': search_str[1]}
    response = requests.post(
        url, json={
            'query': airing_query,
            'variables': variables
        }).json()['data']['Media']
    info = response.get('siteUrl')
    image = info.replace('anilist.co/anime/', 'img.anili.st/media/')
    msg = f"**‚¶æ …¥·¥Ä·¥ç·¥á ¬ª** **{response['title']['romaji']}**(`{response['title']['native']}`)\n**‚¶æ …™·¥Ö ¬ª** `{response['id']}`[‚Å† ‚Å†]({image})"
    if response['nextAiringEpisode']:
        time = response['nextAiringEpisode']['timeUntilAiring'] * 1000
        time = await t(time)
        msg += f"\n**‚¶æ ·¥á·¥ò…™s·¥è·¥Ö·¥á ¬ª** `{response['nextAiringEpisode']['episode']}`\n**‚¶æ ·¥Ä…™ Ä…™…¥…¢ …™…¥ ¬ª** `{time}`"
    else:
        msg += f"\n**‚¶æ ·¥á·¥ò…™s·¥è·¥Ö·¥á ¬ª**{response['episodes']}\n**‚¶æ s·¥õ·¥Ä·¥õ·¥ús ¬ª** `N/A`"
    await message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)






    
