from functools import wraps 
from pyrogram import Client
from pyrogram.types import Message
from pyrogram.enums import ChatMemberStatus
from TeleBot import BOT_ID,DEV_USERS,DRAGONS
from pyrogram.enums import ChatType

COMMANDERS = [ChatMemberStatus.ADMINISTRATOR,ChatMemberStatus.OWNER]
SUPREME_USERS = DEV_USERS + DRAGONS


def bot_admin(func):
    @wraps(func)
    async def is_bot_admin(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)                 
        if BOT.status != ChatMemberStatus.ADMINISTRATOR:                                       
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô·¥ás …™'·¥ç …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ **{message.chat.title}**")
            return 
        return await func(app,message,*args,**kwargs)
    return is_bot_admin

def bot_can_ban(func):
    @wraps(func)
    async def can_restrict(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)
                 
        if not BOT.privileges.can_restrict_members:                        
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Ä …™…¥ **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.ü•∫")
            return 
        return await func(app,message,*args,**kwargs)
    return can_restrict

def bot_can_change_info(func):
    @wraps(func)
    async def can_change_info(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)

        if not BOT.privileges.can_change_info:                         
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥è“ì **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.ü•∫")
            return 
        return await func(app,message,*args,**kwargs)
    return can_change_info


def bot_can_promote(func):
    @wraps(func)
    async def can_promote(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)

        if not BOT.privileges.can_promote_members:                         
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è **·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ús·¥á Äs** …™…¥ **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.")
            return 
        return await func(app,message,*args,**kwargs)
    return can_promote


def bot_can_pin(func):
    @wraps(func)
    async def can_pin(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)

        if not BOT.privileges.can_pin_messages:                         
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è **·¥ò…™…¥ ·¥ç·¥áss·¥Ä…¢·¥ás** …™…¥ **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.")
            return 
        return await func(app,message,*args,**kwargs)
    return can_pin

def user_admin(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):  
        try:  
            user_id = message.from_user.id    
            chat_id = message.chat.id
            user = await app.get_chat_member(chat_id,user_id)
        except Exception as e:
            await message.reply_text(·¥ç·¥Ä è ô·¥á  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. üôÉ,e)
            return 
        
        if (user.status not in COMMANDERS) and user_id not in SUPREME_USERS:
            return await message.reply_text("s·¥õ·¥Ä è …™…¥  è·¥è·¥ú Ä  ü…™·¥ç…™·¥õs ·¥ç“ì.  ô·¥á·¥Ñ·¥è·¥ç·¥á **·¥Ä·¥Ö·¥ç…™…¥** “ì…™ Äs·¥õ.")
                                                                            
        return await mystic(app,message,*args,**kwargs)

    return wrapper

def user_can_ban(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user = await app.get_chat_member(chat_id,user_id)
        
        if (user.status in COMMANDERS and not user.privileges.can_restrict_members) and user_id not in SUPREME_USERS:                     
            return await message.reply_text(" ú·¥á è …¥·¥è·¥è ô  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è ** Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Äs**.  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.") 
                                                    
        return await mystic(app,message,*args,**kwargs)
    return wrapper
            

def user_can_change_info(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user = await app.get_chat_member(chat_id,user_id)
        
        if (user.status in COMMANDERS and not user.privileges.can_change_info) and user_id not in SUPREME_USERS:                     
            return await message.reply_text(" ú·¥á è …¥·¥è·¥è ô  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è **·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è** ·¥è“ì ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö") 
                                                    
        return await mystic(app,message,*args,**kwargs)
    return wrapper
            
def user_can_promote(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user = await app.get_chat_member(chat_id,user_id)
        
        if (user.status in COMMANDERS and not user.privileges.can_promote_members) and user_id not in SUPREME_USERS:                     
            return await message.reply_text(" ú·¥á è …¥·¥è·¥è ô  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è **·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ús·¥á Äs** ·¥è“ì ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö") 
                                                    
        return await mystic(app,message,*args,**kwargs)
    return wrapper
            
