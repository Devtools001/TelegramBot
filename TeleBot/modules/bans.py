import html
import time 
from TeleBot import pgram,BOT_ID,DRAGONS,DEV_USERS
from pyrogram import filters, enums
from TeleBot.modules.pyrogram_funcs.status import (
    bot_admin,
    bot_can_ban,
    user_admin,
    user_can_ban )
from TeleBot.modules.pyrogram_funcs.extracting_id import get_id_reason_or_rank
from TeleBot.helpers.convert import time_converter,convert_time
from contextlib import suppress
from pyrogram.errors import BadRequest 
from TeleBot.helpers.time_checker import get_time, time_string_helper



async def extract_time(message, time_val):
    if any(time_val.endswith(unit) for unit in ("m", "h", "d")):
        unit = time_val[-1]
        time_num = time_val[:-1]  # type: str
        if not time_num.isdigit():
            await message.reply_text("Invalid time amount specified.")
            return ""

        if unit == "m":
            bantime = int(time.time() + int(time_num) * 60)
        elif unit == "h":
            bantime = int(time.time() + int(time_num) * 60 * 60)
        elif unit == "d":
            bantime = int(time.time() + int(time_num) * 24 * 60 * 60)
        else:
            # how even...?
            return ""
        return bantime
    else:
        await message.reply_text(
            "Invalid time type specified. Expected m,h, or d, got: {}".format(
                time_val[-1]
            )
        )
        return ""


SUPREME_USERS = DEV_USERS + DRAGONS

@pgram.on_message(filters.command("kickme") & ~filters.private)
@bot_admin
@bot_can_ban
async def _kickme(_, message):
    user_id = message.from_user.id
    chat_id = message.chat.id
 
    administrators = []
    async for m in pgram.get_chat_members(chat_id, filter=enums.ChatMembersFilter.ADMINISTRATORS):
        administrators.append(m.user.id)
    if user_id in administrators:
        await message.reply_text("I ·¥°…™s ú I ·¥Ñ·¥è·¥ú ü·¥Ö...  ô·¥ú·¥õ  è·¥è·¥ú' Ä·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.")
        return
    try:
        await pgram.ban_chat_member(chat_id, user_id)
        await pgram.unban_chat_member(chat_id, user_id)
        await message.reply_text("*·¥ã…™·¥Ñ·¥ãs  è·¥è·¥ú ·¥è·¥ú·¥õ ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò*")
    except Exception as error:
        await message.reply_text(error)
       
         
@pgram.on_message(filters.command(["ban","sban","dban"]) & ~filters.private)
@bot_admin
@bot_can_ban
@user_admin
@user_can_ban
async def _ban(_, message):
    user_id , reason = await get_id_reason_or_rank(message, sender_chat=True)
    chat_id = message.chat.id
    administrators = []
    async for m in pgram.get_chat_members(chat_id, filter=enums.ChatMembersFilter.ADMINISTRATORS):
        administrators.append(m.user.id)
    if not user_id:
        await message.reply_text("I ·¥Ö·¥è·¥ú ô·¥õ ·¥õ ú·¥Ä·¥õ's ·¥Ä ·¥ús·¥á Ä.")
        return 
    if user_id == BOT_ID:
        await message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥ç ès·¥á ü“ì, …™ ·¥Ñ·¥Ä…¥  ü·¥á·¥Ä·¥†·¥á …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ.")
        return 
    if user_id in SUPREME_USERS:
        await message.reply_text(" ú·¥á …™s ·¥ç è  ô Ä·¥Ä, …™ ·¥Ñ·¥Ä…¥'·¥õ …¢·¥á·¥õ ·¥Ä…¢·¥Ä…™…¥s·¥õ ·¥ç è  ô Ä·¥Ä ·¥è·¥ã ·¥ç·¥è·¥õ ú·¥á Ä “ì*·¥ã·¥á Ä")
        return
    if user_id in administrators:
        await message.reply_text(f" ú·¥è·¥° ·¥Ä·¥ç I s·¥ú·¥ò·¥ò·¥ès·¥á·¥Ö ·¥õ·¥è  ô·¥Ä…¥ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥. ·¥õ ú…™…¥·¥ã {message.from_user.mention} ·¥õ ú…™…¥·¥ã.")
    try :
        mention = (await pgram.get_users(user_id)).mention
    except IndexError:
        mention = (
            message.reply_to_message.sender_chat.title
            if message.reply_to_message
            else "Anon"
        )
    
    if message.command[0] == "ban":
        await pgram.ban_chat_member(chat_id, user_id)
        await message.reply_text(f"üö® B·¥Ä…¥…¥·¥á·¥Ö Us·¥á Ä: {mention}\nüéé B·¥Ä…¥…¥·¥á·¥Ö B è: {message.from_user.mention if message.from_user else 'Anon'}\n")        
    if message.command[0] == "sban":
        await message.delete()
        await message.reply_to_message.delete()
        await pgram.ban_chat_member(chat_id, user_id)
    if message.command[0] == "dban":
        await message.reply_to_message.delete()
        await pgram.ban_chat_member(chat_id, user_id)
        await message.reply_text(f"üö® B·¥Ä…¥…¥·¥á·¥Ö Us·¥á Ä: {mention}\nüéé B·¥Ä…¥…¥·¥á·¥Ö B è: {message.from_user.mention if message.from_user else 'Anon'}\n")    
    
            
@pgram.on_message(filters.command("tban") & ~filters.private)
@bot_admin
@bot_can_ban
@user_admin
@user_can_ban
async def _tban(_, message):
    user_id , reason = await get_id_reason_or_rank(message, sender_chat=True)
    chat_id = message.chat.id
    administrators = []
    async for m in pgram.get_chat_members(chat_id, filter=enums.ChatMembersFilter.ADMINISTRATORS):
        administrators.append(m.user.id)
    if not user_id:
        await message.reply_text("I ·¥Ö·¥è·¥ú ô·¥õ ·¥õ ú·¥Ä·¥õ's ·¥Ä ·¥ús·¥á Ä.")
        return 
    if user_id == BOT_ID:
        await message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥ç ès·¥á ü“ì, …™ ·¥Ñ·¥Ä…¥  ü·¥á·¥Ä·¥†·¥á …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ.")
        return 
    if user_id in SUPREME_USERS:
        await message.reply_text(" ú·¥á …™s ·¥ç è  ô Ä·¥Ä, …™ ·¥Ñ·¥Ä…¥'·¥õ …¢·¥á·¥õ ·¥Ä…¢·¥Ä…™…¥s·¥õ ·¥ç è  ô Ä·¥Ä ·¥è·¥ã ·¥ç·¥è·¥õ ú·¥á Ä “ì*·¥ã·¥á Ä")
        return
    if user_id in administrators:
        await message.reply_text(f" ú·¥è·¥° ·¥Ä·¥ç I s·¥ú·¥ò·¥ò·¥ès·¥á·¥Ö ·¥õ·¥è  ô·¥Ä…¥ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥. ·¥õ ú…™…¥·¥ã {message.from_user.mention} ·¥õ ú…™…¥·¥ã.")
    try :
        mention = (await pgram.get_users(user_id)).mention
    except IndexError:
        mention = (
            message.reply_to_message.sender_chat.title
            if message.reply_to_message
            else "Anon"
        )    
         
    if not reason:
        await message.reply_text("You haven't specified a time to ban this user for!")
        return 

    split_reason = reason.split(None, 1)
    time_val = split_reason[0].lower()
    reason = split_reason[1] if len(split_reason) > 1 else ""
    tame = await extract_time(message, time_val)
    try:
        await pgram.ban_chat_member(chat_id,user_id,tame)
        await message.reply_text(            
            f" ô·¥Ä…¥…¥·¥á·¥Ö! ·¥ús·¥á Ä {mention} "
            f"…™s …¥·¥è·¥°  ô·¥Ä…¥…¥·¥á·¥Ö “ì·¥è Ä {time_val}.",
            
        )
        return 
    except BadRequest as excp:
        if excp.message == "Reply message not found":
            # Do not reply
            await message.reply_text(
                f"Banned! User will be banned for {time_val}.")
            
            return 
        else:
           await message.reply_text("Well damn, I can't ban that user.")

       
@pgram.on_message(filters.command("unban") & ~filters.private)
@bot_admin
@bot_can_ban
@user_admin
@user_can_ban
async def _unban(_, message):
    chat_id = message.chat.id
    replied = message.reply_to_message
    admin = message.from_user.mention
    user = await get_user_id(message)
    banned_users = []
    async for m in app.get_chat_members(chat_id, filter=enums.ChatMembersFilter.BANNED):
        banned_users.append(m.user.id)
    if (replied
        and replied.sender_chat 
        and replied.sender_chat != chat_id):
        await message.reply_text(" è·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
        return
    if not user:
        await message.reply_text("…™ ·¥Ö·¥è·¥ú ô·¥õ ·¥õ ú·¥Ä·¥õ's ·¥Ä ·¥ús·¥á Ä.")
        return 
    if user not in banned_users:
        await message.reply_text(" ô Ä·¥ú ú ·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥ …™s …¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö.")

    try:
        await pgram.unban_chat_member(chat_id,user)
        umention = (await pgram.get_users(user)).mention
        await message.reply_text(f"·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä : {umention}\n·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö  ô è : {admin}")
    except BadRequest as ok:
        await message.reply_text(ok)
        


            
