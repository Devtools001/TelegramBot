from TeleBot import pgram 
from pyrogram import Client
from pyrogram.types import Message 
from pyrogram.enums import ChatMemberStatus
from TeleBot import BOT_ID
from functools import wraps 
DRAGONS = [5556308886]
DEV_USERS = [5556308886]

async def is_user_admin(app : Client, message: Message) -> bool:
    user_id = message.from_user.id
    chat_id = message.chat.id
    user = await app.get_chat_member(chat_id,user_id)
    if (        
        user_id in DRAGONS
        or user_id in DEV_USERS
        or user.status in [ChatMemberStatus.ADMINISTRATOR,ChatMemberStatus.OWNER]
        or user_id == 1087968824
    ):  
        return True
    



async def is_bot_admin(app : Client, message: Message) -> bool:    
    chat_id = message.chat.id
    BOT = await app.get_chat_member(chat_id,BOT_ID)
    if BOT.status == ChatMemberStatus.ADMINISTRATOR:
        return True
    


def user_admin(func):
    @wraps(func)
    async def is_admin(app : Client, message : Message,*args,**kwargs):        
        user = message.from_user
        chat_id = message.chat.id
        if user and is_user_admin(chat, user.id):
            return func(update, context, *args, **kwargs)
        if not user:
            pass
        elif DEL_CMDS and " " not in update.effective_message.text:
            try:
                update.effective_message.delete()
            except:
                pass
        else:
            update.effective_message.reply_text(
                "At Least be an Admin to use these all Commands",
            )

    return is_admin

def bot_admin(func):
    @wraps(func)
    def is_admin(update: Update, context: CallbackContext, *args, **kwargs):
        bot = context.bot
        chat = update.effective_chat
        update_chat_title = chat.title
        message_chat_title = update.effective_message.chat.title

        if update_chat_title == message_chat_title:
            not_admin = "I'm not admin!"
        else:
            not_admin = f"I'm not admin in <b>{update_chat_title}</b>! "

        if is_bot_admin(chat, bot.id):
            return func(update, context, *args, **kwargs)
        update.effective_message.reply_text(not_admin, parse_mode=ParseMode.HTML)

    return is_admin


def can_restrict(func):
    @wraps(func)
    def restrict_rights(update: Update, context: CallbackContext, *args, **kwargs):
        bot = context.bot
        chat = update.effective_chat
        update_chat_title = chat.title
        message_chat_title = update.effective_message.chat.title

        if update_chat_title == message_chat_title:
            cant_restrict = "I can't restrict people here!\nMake sure I'm admin and can restrict users."
        else:
            cant_restrict = f"I can't restrict people in <b>{update_chat_title}</b>!\nMake sure I'm admin there and can restrict users."

        if chat.get_member(bot.id).can_restrict_members:
            return func(update, context, *args, **kwargs)
        update.effective_message.reply_text(
            cant_restrict, parse_mode=ParseMode.HTML,
        )

    return restrict_rights

def user_can_ban(func):
    @wraps(func)
    def user_is_banhammer(update: Update, context: CallbackContext, *args, **kwargs):
        bot = context.bot
        user = update.effective_user.id
        member = update.effective_chat.get_member(user)
        if (
            not member.can_restrict_members
            and member.status != "creator"
            and user not in DRAGONS
            and user not in [1087968824]
        ):
            update.effective_message.reply_text(
                "Sorry son, but you're not worthy to wield the banhammer.",
            )
            return ""
        return func(update, context, *args, **kwargs)

    return user_is_banhammer

